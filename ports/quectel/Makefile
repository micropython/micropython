TOP := ../..
ROOT := $(TOP)/../..

include ../../py/mkenv.mk
include mpconfigport.mk
include quectel.mk

include ../../py/verbose.mk

# Select the board to build for:
ifdef BOARD_DIR
# Custom board path - remove trailing slash and get the final component of
# the path as the board name.
BOARD ?= $(notdir $(BOARD_DIR:/=))
else
# If not given on the command line, then default to RPI_PICO.
BOARD ?= EC600UCN_LB
BOARD_DIR ?= boards/$(BOARD)
endif

ifeq ($(wildcard $(BOARD_DIR)/.),)
ifeq ($(findstring boards/PICO,$(BOARD_DIR)),boards/PICO)
$(warning The PICO* boards have been renamed to RPI_PICO*)
endif
$(error Invalid BOARD specified: $(BOARD_DIR))
endif

# If the build directory is not given, make it reflect the board name (and
# optionally the board variant).
ifneq ($(BOARD_VARIANT),)
BUILD ?= build-$(BOARD)-$(BOARD_VARIANT)
else
BUILD ?= build-$(BOARD)
endif

ifeq ($(BUILD_VERBOSE),1)
MAKE_ARGS += VERBOSE=1  # Picked up in Makefile generated by CMake
endif

MAKE_ARGS += -DMICROPY_BOARD=$(BOARD) -DMICROPY_BOARD_DIR="$(abspath $(BOARD_DIR))"

ifdef USER_C_MODULES
MAKE_ARGS += -DUSER_C_MODULES=${USER_C_MODULES}
endif

ifneq ($(FROZEN_MANIFEST),)
MAKE_ARGS += -DMICROPY_FROZEN_MANIFEST=${FROZEN_MANIFEST}
endif

ifeq ($(DEBUG),1)
MAKE_ARGS += -DCMAKE_BUILD_TYPE=Debug
endif

ifdef BOARD_VARIANT
MAKE_ARGS += -DMICROPY_BOARD_VARIANT=$(BOARD_VARIANT)
endif

ifdef MICROPY_PREVIEW_VERSION_2
MAKE_ARGS += -DMICROPY_PREVIEW_VERSION_2=1
endif

FROZEN_MANIFEST ?= boards/manifest.py

CFLAGS = $(INC) $(QUEC_MOD_CFLAGS) $(PLAT_CFLAGS) $(PLAT_DFLAGS) $(COPT) $(MAKE_ARGS)

CSUPEROPT = -Os # save some code space

# qstr definitions (must come before including py.mk)
QSTR_DEFS = qstrdefsport.h

# MicroPython feature configurations
MICROPY_ROM_TEXT_COMPRESSION ?= 1

# include py core make definitions
include $(TOP)/py/py.mk
include $(TOP)/extmod/extmod.mk

CROSS_COMPILE ?= arm-none-eabi-


INC += -I.
INC += -I$(TOP)
INC += -I$(BUILD)
INC += $(MICROPYTHON_CFLAGS_INC)
INC += $(QUEC_INC)

# Tune for Debugging or Optimization
ifeq ($(DEBUG), 1)
CFLAGS += -O0 -ggdb
else
CFLAGS += -Os -DNDEBUG
CFLAGS += -fdata-sections -ffunction-sections
endif

# Flags for optional C++ source code
CXXFLAGS += $(filter-out -std=c99,$(CFLAGS))
CXXFLAGS += $(CXXFLAGS_MOD)

# Flags for user C modules
CFLAGS += $(CFLAGS_MOD)
LDFLAGS += $(LDFLAGS_MOD)

LIBS =

SHARED_SRC_C = shared/libc/printf.c \
	shared/readline/readline.c \
	shared/runtime/pyexec.c \
	shared/runtime/sys_stdio_mphal.c \
	shared/runtime/stdout_helpers.c \
	shared/netutils/netutils.c \
	shared/runtime/interrupt_char.c \
	shared/timeutils/timeutils.c

EXTMOD_SRC_C = extmod/vfs.c \
	extmod/vfs_lfs.c \
	extmod/vfs_blockdev.c \
	extmod/modrandom.c \
	extmod/modjson.c \
	extmod/modbinascii.c \
	extmod/vfs_reader.c \
	extmod/modre.c \
	extmod/modhashlib.c \
	extmod/moductypes.c

EXTMOD_SRC_C += $(SRC_THIRDPARTY_C)

SRC_MOD += $(QUEC_SRC_MOD)

SRC_C += $(SRC_MOD) \
		 $(SHARED_SRC_C) \
		 $(EXTMOD_SRC_C) \
		 $(QUEC_SRC) \
		 $(BUILD)/frozen_content.c

SRC_CXX += $(SRC_MOD_CXX)

SRC_QSTR += $(SRC_MOD) $(SRC_MOD_CXX) $(SHARED_SRC_C) $(EXTMOD_SRC_C)

OBJ += $(PY_CORE_O) $(addprefix $(BUILD)/, $(SRC_C:.c=.o))
OBJ += $(addprefix $(BUILD)/, $(SRC_CXX:.cpp=.o))

all: $(BUILD)/firmware.a

$(BUILD)/_frozen_mpy.c: frozentest.mpy $(BUILD)/genhdr/qstrdefs.generated.h
	$(ECHO) "MISC freezing bytecode"
	$(Q)$(PYTHON) $(TOP)/tools/mpy-tool.py -f -q $(BUILD)/genhdr/qstrdefs.preprocessed.h -mlongint-impl=none $< > $@

$(BUILD)/firmware.a: $(OBJ)
	$(ECHO) "AR $@"
	$(Q)$(AR) -cr $@ $^

include $(TOP)/py/mkrules.mk
